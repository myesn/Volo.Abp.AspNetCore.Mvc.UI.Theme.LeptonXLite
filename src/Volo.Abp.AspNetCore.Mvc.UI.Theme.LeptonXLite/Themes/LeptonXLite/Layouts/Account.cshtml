@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Options
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Themes.LeptonXLite.Components.PageAlerts
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Themes.LeptonXLite.Components.Brand
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Themes.LeptonXLite.Components.BreadCrumbs
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Toolbars
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.LeptonXLite.Themes.LeptonXLite.Components.MainToolbar
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@using Volo.Abp.AspNetCore.Mvc.UI.MultiTenancy.Localization
@using Volo.Abp.AspNetCore.MultiTenancy
@using Volo.Abp.MultiTenancy
@using Volo.Abp.Ui.LayoutHooks
@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@inject IStringLocalizer<AbpUiMultiTenancyResource> MultiTenancyStringLocalizer
@inject ITenantResolveResultAccessor TenantResolveResultAccessor
@inject IOptions<AbpMultiTenancyOptions> MultiTenancyOptions
@inject ICurrentTenant CurrentTenant
@{
	Layout = null;
	
	var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

	if (PageLayout.Content.Title != null)
	{
		if (!string.IsNullOrWhiteSpace(pageTitle))
		{
			pageTitle = " | " + pageTitle;
		}

		pageTitle = PageLayout.Content.Title + pageTitle;
	}

	var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">

<head>
	@await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Account)

	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">

	<title>@pageTitle</title>

	<link rel="icon" href="~/favicon.svg" type="image/svg+xml">
	
	<abp-style-bundle name="@LeptonXLiteThemeBundles.Styles.Global" />

	@await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

	@await RenderSectionAsync("styles", false)

	@await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Account)
</head>

<body class="abp-account-layout @rtl">
	@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Account)

	<div class="lpx-scroll-container">
		<div id="lpx-wrapper">

			<div class="lpx-mobile-navbar-container">
				<header class="lpx-mobile-navbar">
					<div class="lpx-logo-container">
						@await Component.InvokeAsync(typeof(MainNavbarBrandViewComponent))
					</div>
					<div class="user-menu">
						<i class="lpx-icon bi bi-person lpx-toggle" data-lpx-toggle="mobile-user-menu-group" aria-hidden="true"></i>
					</div>
				</header>

				<div class="user-menu-groups d-none" id="mobile-user-menu-group">
					@await Component.InvokeAsync(typeof(ToolbarItemsViewComponent), new { Name = LeptonXLiteToolbars.MainMobile })
				</div>
			</div>

			<div class="lpx-content-container m-0">
				<div class="lpx-topbar-container">
					<div class="lpx-topbar rounded-0">
						<nav aria-label="breadcrumb" class="lpx-breadcrumb-container">
							@await Component.InvokeAsync(typeof(BreadCrumbsViewComponent))
						</nav>

						<div class="lpx-topbar-content">
							@await Component.InvokeAsync(typeof(ToolbarItemsViewComponent), new { Name = LeptonXLiteToolbars.Main})
						</div>
					</div>
				</div>

				<div class="lpx-content">
					@await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Account)

					<div class="container">
						<div class="row"> 
							<div class="col-md-8 col-lg-5 mx-auto">
								
								@await Component.InvokeAsync(typeof(PageAlertsViewComponent))

								@if (MultiTenancyOptions.Value.IsEnabled &&
									(TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(CookieTenantResolveContributor.ContributorName) == true ||
									TenantResolveResultAccessor.Result?.AppliedResolvers?.Contains(QueryStringTenantResolveContributor.ContributorName) == true))
								{
									<abp-card>
										<abp-card-body>
											<div class="row">
												<div class="col">
													<span style="font-size: .8em;"
														class="text-uppercase text-muted">@MultiTenancyStringLocalizer["Tenant"]</span><br />
													<h6 class="m-0 d-inline-block">
														@if (CurrentTenant.Id == null)
														{
															<span>
																@MultiTenancyStringLocalizer["NotSelected"]
															</span>
														}
														else
														{
															<strong>@(CurrentTenant.Name ??
																	CurrentTenant.Id.Value.ToString())</strong>
														}
													</h6>
												</div>
												<div class="col-auto">
													<a id="AbpTenantSwitchLink" href="javascript:;"
													class="btn btn-sm btn-outline-primary">@MultiTenancyStringLocalizer["Switch"]</a>
												</div>
											</div>
										</abp-card-body>
									</abp-card>
									<hr />
								}


								@RenderBody()

								@*<UiMessageAlert />
								<UiNotificationAlert />
								<UiPageProgress />*@
						
								@await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Account)
							</div>
						</div>
					</div>
				</div>

			</div>

		</div>
	</div>

	<abp-script-bundle name="@LeptonXLiteThemeBundles.Scripts.Global" />
    <script src="~/Abp/ApplicationLocalizationScript?cultureName=@CultureInfo.CurrentUICulture.Name"></script>
	<script type="text/javascript" src="~/Abp/ApplicationConfigurationScript"></script>
	<script type="text/javascript" src="~/Abp/ServiceProxyScript"></script>

	@await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

	@await RenderSectionAsync("scripts", false)

	@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Account)
</body>

</html>